// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: quotationmvp/quotation/transaction.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_PENDING   Status = 0
	Status_APPROVED  Status = 1
	Status_CANCELLED Status = 2
)

var Status_name = map[int32]string{
	0: "PENDING",
	1: "APPROVED",
	2: "CANCELLED",
}

var Status_value = map[string]int32{
	"PENDING":   0,
	"APPROVED":  1,
	"CANCELLED": 2,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0de381c6ee626795, []int{0}
}

type Transaction struct {
	Data      string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Sender    string   `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver  []string `protobuf:"bytes,3,rep,name=receiver,proto3" json:"receiver,omitempty"`
	Status    Status   `protobuf:"varint,4,opt,name=status,proto3,enum=quotationmvp.quotation.Status" json:"status,omitempty"`
	Proposals []string `protobuf:"bytes,5,rep,name=proposals,proto3" json:"proposals,omitempty"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_0de381c6ee626795, []int{0}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return m.Size()
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *Transaction) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Transaction) GetReceiver() []string {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *Transaction) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *Transaction) GetProposals() []string {
	if m != nil {
		return m.Proposals
	}
	return nil
}

type ProposalTransaction struct {
	Data     string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Sender   string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver string `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver,omitempty"`
	RqId     string `protobuf:"bytes,4,opt,name=rqId,proto3" json:"rqId,omitempty"`
	Status   Status `protobuf:"varint,5,opt,name=status,proto3,enum=quotationmvp.quotation.Status" json:"status,omitempty"`
}

func (m *ProposalTransaction) Reset()         { *m = ProposalTransaction{} }
func (m *ProposalTransaction) String() string { return proto.CompactTextString(m) }
func (*ProposalTransaction) ProtoMessage()    {}
func (*ProposalTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_0de381c6ee626795, []int{1}
}
func (m *ProposalTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalTransaction.Merge(m, src)
}
func (m *ProposalTransaction) XXX_Size() int {
	return m.Size()
}
func (m *ProposalTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalTransaction proto.InternalMessageInfo

func (m *ProposalTransaction) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *ProposalTransaction) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *ProposalTransaction) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *ProposalTransaction) GetRqId() string {
	if m != nil {
		return m.RqId
	}
	return ""
}

func (m *ProposalTransaction) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

type AcceptRejectProposalTransaction struct {
	Action bool `protobuf:"varint,1,opt,name=action,proto3" json:"action,omitempty"`
}

func (m *AcceptRejectProposalTransaction) Reset()         { *m = AcceptRejectProposalTransaction{} }
func (m *AcceptRejectProposalTransaction) String() string { return proto.CompactTextString(m) }
func (*AcceptRejectProposalTransaction) ProtoMessage()    {}
func (*AcceptRejectProposalTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_0de381c6ee626795, []int{2}
}
func (m *AcceptRejectProposalTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcceptRejectProposalTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcceptRejectProposalTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcceptRejectProposalTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptRejectProposalTransaction.Merge(m, src)
}
func (m *AcceptRejectProposalTransaction) XXX_Size() int {
	return m.Size()
}
func (m *AcceptRejectProposalTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptRejectProposalTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptRejectProposalTransaction proto.InternalMessageInfo

func (m *AcceptRejectProposalTransaction) GetAction() bool {
	if m != nil {
		return m.Action
	}
	return false
}

func init() {
	proto.RegisterEnum("quotationmvp.quotation.Status", Status_name, Status_value)
	proto.RegisterType((*Transaction)(nil), "quotationmvp.quotation.Transaction")
	proto.RegisterType((*ProposalTransaction)(nil), "quotationmvp.quotation.ProposalTransaction")
	proto.RegisterType((*AcceptRejectProposalTransaction)(nil), "quotationmvp.quotation.AcceptRejectProposalTransaction")
}

func init() {
	proto.RegisterFile("quotationmvp/quotation/transaction.proto", fileDescriptor_0de381c6ee626795)
}

var fileDescriptor_0de381c6ee626795 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x4f, 0x4b, 0x02, 0x41,
	0x18, 0xc6, 0x77, 0xfc, 0xb3, 0xb9, 0xaf, 0x15, 0x32, 0x81, 0x2c, 0x11, 0xa3, 0x78, 0x5a, 0x82,
	0x56, 0x30, 0x08, 0x3c, 0x9a, 0x2e, 0x21, 0x88, 0x2d, 0x53, 0x74, 0xe8, 0x36, 0xad, 0x73, 0x30,
	0xca, 0x1d, 0x67, 0x46, 0xa9, 0x6f, 0xd1, 0xd7, 0x88, 0xbe, 0x48, 0x47, 0x8f, 0x1d, 0x43, 0xbf,
	0x48, 0x38, 0x2e, 0xeb, 0x06, 0x5e, 0x82, 0x6e, 0xcf, 0xef, 0xe5, 0xe1, 0xe5, 0xf7, 0xc2, 0x0b,
	0xde, 0x74, 0x16, 0x6b, 0xa6, 0xc7, 0xf1, 0xe4, 0x79, 0x2e, 0x9a, 0x29, 0x34, 0xb5, 0x64, 0x13,
	0xc5, 0xa2, 0x75, 0xf6, 0x85, 0x8c, 0x75, 0x8c, 0xab, 0xd9, 0xa6, 0x9f, 0x42, 0xe3, 0x03, 0x41,
	0xf9, 0x76, 0xdb, 0xc6, 0x18, 0x0a, 0x23, 0xa6, 0x99, 0x8b, 0xea, 0xc8, 0x73, 0xa8, 0xc9, 0xb8,
	0x0a, 0xb6, 0xe2, 0x93, 0x11, 0x97, 0x6e, 0xce, 0x4c, 0x13, 0xc2, 0xc7, 0x50, 0x92, 0x3c, 0xe2,
	0xe3, 0x39, 0x97, 0x6e, 0xbe, 0x9e, 0xf7, 0x1c, 0x9a, 0x32, 0xbe, 0x00, 0x5b, 0x69, 0xa6, 0x67,
	0xca, 0x2d, 0xd4, 0x91, 0x77, 0xd8, 0x22, 0xfe, 0x6e, 0x01, 0xff, 0xc6, 0xb4, 0x68, 0xd2, 0xc6,
	0x27, 0xe0, 0x08, 0x19, 0x8b, 0x58, 0xb1, 0x27, 0xe5, 0x16, 0xcd, 0xd2, 0xed, 0xa0, 0xf1, 0x8e,
	0xe0, 0x28, 0x4c, 0xe8, 0x7f, 0xac, 0xd1, 0x2f, 0x6b, 0x0c, 0x05, 0x39, 0xed, 0x8f, 0x8c, 0xb3,
	0x43, 0x4d, 0xce, 0x5c, 0x52, 0xfc, 0xcb, 0x25, 0x8d, 0x36, 0xd4, 0x3a, 0x51, 0xc4, 0x85, 0xa6,
	0xfc, 0x91, 0x47, 0x7a, 0x97, 0x76, 0x15, 0xec, 0x4d, 0x32, 0xe2, 0x25, 0x9a, 0xd0, 0x69, 0x0b,
	0xec, 0xcd, 0x32, 0x5c, 0x86, 0xbd, 0x30, 0x18, 0xf6, 0xfa, 0xc3, 0xab, 0x8a, 0x85, 0xf7, 0xa1,
	0xd4, 0x09, 0x43, 0x7a, 0x7d, 0x17, 0xf4, 0x2a, 0x08, 0x1f, 0x80, 0xd3, 0xed, 0x0c, 0xbb, 0xc1,
	0x60, 0x10, 0xf4, 0x2a, 0xb9, 0xcb, 0xf6, 0xe7, 0x92, 0xa0, 0xc5, 0x92, 0xa0, 0xef, 0x25, 0x41,
	0x6f, 0x2b, 0x62, 0x2d, 0x56, 0xc4, 0xfa, 0x5a, 0x11, 0xeb, 0xbe, 0x96, 0x2a, 0x9e, 0xad, 0xbf,
	0xe4, 0x25, 0xfb, 0x27, 0xaf, 0x82, 0xab, 0x07, 0xdb, 0xbc, 0xc8, 0xf9, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xe1, 0x7d, 0x0e, 0x19, 0x4e, 0x02, 0x00, 0x00,
}

func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Transaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proposals) > 0 {
		for iNdEx := len(m.Proposals) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Proposals[iNdEx])
			copy(dAtA[i:], m.Proposals[iNdEx])
			i = encodeVarintTransaction(dAtA, i, uint64(len(m.Proposals[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Status != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Receiver) > 0 {
		for iNdEx := len(m.Receiver) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Receiver[iNdEx])
			copy(dAtA[i:], m.Receiver[iNdEx])
			i = encodeVarintTransaction(dAtA, i, uint64(len(m.Receiver[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RqId) > 0 {
		i -= len(m.RqId)
		copy(dAtA[i:], m.RqId)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.RqId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AcceptRejectProposalTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptRejectProposalTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcceptRejectProposalTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Action {
		i--
		if m.Action {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTransaction(dAtA []byte, offset int, v uint64) int {
	offset -= sovTransaction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Transaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if len(m.Receiver) > 0 {
		for _, s := range m.Receiver {
			l = len(s)
			n += 1 + l + sovTransaction(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovTransaction(uint64(m.Status))
	}
	if len(m.Proposals) > 0 {
		for _, s := range m.Proposals {
			l = len(s)
			n += 1 + l + sovTransaction(uint64(l))
		}
	}
	return n
}

func (m *ProposalTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.RqId)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTransaction(uint64(m.Status))
	}
	return n
}

func (m *AcceptRejectProposalTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action {
		n += 2
	}
	return n
}

func sovTransaction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransaction(x uint64) (n int) {
	return sovTransaction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = append(m.Receiver, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposals", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposals = append(m.Proposals, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptRejectProposalTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptRejectProposalTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptRejectProposalTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Action = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransaction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransaction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTransaction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTransaction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTransaction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransaction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTransaction = fmt.Errorf("proto: unexpected end of group")
)
